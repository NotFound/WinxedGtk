#! winxed

// JSON tree view - Pruebas WinxedGtk

$load 'WinxedGtk.pbc';

//**********************************************************************

namespace WinxedGtk
{

class VBox;
class HBox;
class ScrolledWindow;
class Window;
class Label;
class Button;
class Entry;
class Image;
class Tree;
class TreeItem;

}

using namespace WinxedGtk;

class JsonTreeWindow : Window
{
    function JsonTreeWindow(string filename, data)
    {
        self.Window(0);
        self.set_border_width(8);
        self.set_title('WinxedGtk tree view test');
        self.signal_connect('destroy',
            function ()
            {
                using WinxedGtk.gtk_main_quit;
                gtk_main_quit();
            }
        );
        var vbox = new VBox(0, 4);
        var label = new Label('JSON tree view');
        var label2 = new Label(filename);

        var image = new Image('parrot_small.png');
        image.show();

        label.show();
        label2.show();
        var hbox = new HBox(1, 4);

        var tree = new Tree();
        add_object(tree, data);
        tree.show();

        var buttonclose = new Button('close');
        buttonclose.signal_connect('clicked',
            function ()
            {
                self.destroy();
            }
        );
        buttonclose.show();
        hbox.pack_start(buttonclose, 0, 0, 0);

        vbox.pack_start(image, 0, 0, 4);
        vbox.pack_start(label, 0, 0, 10);

        //vbox.add(tree);
	var scrolled = new ScrolledWindow();
	scrolled.add_with_viewport(tree);
	scrolled.set_policy(1, 1);
	vbox.pack_start(scrolled, true, true, 0);
	scrolled.show();

        vbox.pack_start(label2, 0, 0, 6);
        vbox.pack_start(hbox, 0, 0, 6);

        self.add(vbox);
        hbox.show();
        vbox.show();
    }
}

function add_object(tree, object)
{
    var item;
    switch {
      case object instanceof ['ResizablePMCArray']:
        int n = elements(object);
        for (int i = 0; i < n; ++i) {
            item = new TreeItem(string(i));
            var subtree = new Tree();
            add_object(subtree, object[i]);
            tree.append(item);
            subtree.show();
            item.set_subtree(subtree);
            item.show();
        }
        break;
      case object instanceof ['Hash']:
        for (string key in object) {
            item = new TreeItem(key);
            var subtree = new Tree();
            add_object(subtree, object[key]);
            tree.append(item);
            subtree.show();
            item.set_subtree(subtree);
            item.show();
        }
        break;
      default:
        string str = object;
        item = new TreeItem(str);
        tree.append(item);
        item.show();
    }
}

function read_data(string filename)
{
    var json = load_language('data_json');
    var file = open(filename);
    file.encoding('utf8');
    var code = json.compile(file.readall());
    var data = code();
    return data;
}

function main(args)
{
    using WinxedGtk.init;
    using WinxedGtk.gtk_main;

    say('Initializing');
    init(args);

    string filename = args[1];
    var data = read_data(filename);

    var window = new JsonTreeWindow(filename, data);
    window.show();
    say('Running');
    gtk_main();

    say('End');
}

// End
