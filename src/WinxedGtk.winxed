// Pruebas gtk


//**********************************************************************

namespace WinxedGtk
{

const int DEBUG = 0;

namespace __private
{

$include_const 'datatypes.pasm';

function get_parrot_func(string name, string signature)
{
    return dlfunc(null, name, signature);
}

function str_to_cstring(string s)
{
    var cstring = new ['ByteBuffer'];
    if (s != null) {
        string enc = encoding_name(s);
        if (enc != 'ascii' && enc != 'utf8')
            s = trans_encoding(s, 'utf8');
        cstring =: s;
        push(cstring, 0);
    }
    return cstring;
}

function string_from_nci(p)
{
    return p.as_string('utf8');
}

//**********************************************************************

namespace internal
{

function loadgtklib[anon]()
{
    var lib;

    for (string libname in [
            'libgtk-x11',
            'libgtk-x11-2.0',
            'libgtk-x11-2.0.so',
            '/usr/lib/libgtk-x11-2.0.so',
            '/usr/lib/libgtk-x11-2.0.so.0'
            ] ) {
        lib = loadlib(libname);
        if (lib) {
            if (DEBUG) cry("Loaded library: '", libname, "'");
            break;
        }
    }
    if (lib == null)
        throw "Cannot load lib";

    return lib;
}

}

function getlib()
{
    var ns = namespace internal;
    var lib = ns["lib"];
    if (lib == null)
        ns["lib"] = lib = internal.loadgtklib();
    return lib;
}

function getsignatures()
{
    return {
        "g_free" : "vp",
        "g_object_get" : "vpppp",
        "gtk_signal_connect_full" : "lppppPpii",
        "g_signal_handler_disconnect" : "vpl",
        "gtk_check_version" : "piii",
        "gtk_init" : "ipp",
        "gtk_main_level" : "i",
        "gtk_main_iteration" : "i",
        "gtk_main_quit" : "v",
        "gtk_widget_show" : "vp",
        "gtk_widget_set_size_request" : "vpii",
        "gtk_widget_get_style" : "pp",
        "gtk_widget_get_window" : "pp",
        "gtk_widget_destroy" : "vp",
        "gtk_window_new" : "pi",
        "gtk_window_set_title" : "vpp",
        "gtk_button_new_with_label" : "pp",
        "gtk_container_set_border_width" : "vpi",
        "gtk_container_add" : "vpp",
        "gtk_box_pack_start" : "vppiii",
        "gtk_vbox_new" : "pii",
        "gtk_hbox_new" : "pii"
    };
}

function gtkfunc(string name)
{
    var ns = namespace internal;
    var func = ns[name];
    if (func == null) {
        var sigs = ns["signatures"];
        if (sigs == null)
            ns["signatures"] = sigs = getsignatures();
        if (! exists sigs[name])
            throw "signature for " + name + " not available";
        func = dlfunc(getlib(), name, sigs[name]);
    }
    return func;
}

//**********************************************************************

function g_free(p)
{
    gtkfunc("g_free")(p);
}

function gtk_main_level()
{
    return int(gtkfunc("gtk_main_level")());
}

function mainloop_quit()
{
    var ns = namespace internal;
    var quit = ns["quit"];
    if (quit == null)
        ns["quit"] = quit = 0;
    return quit;
}

function __text_iter_new()
{
    // There is no function to allocate a new GtkTextIter,
    // this does the trick.
    var iter_copy = dlfunc(getlib(), "gtk_text_iter_copy", "pp");
    var ugly = new ['ManagedStruct'](256);
    return iter_copy(ugly);
}

function __text_iter_free(iter)
{
    var iter_free = dlfunc(getlib(), "gtk_text_iter_free", "vp");
    iter_free(iter);
}

function __check_version()
{
    var ns = namespace internal;
    var retfunc = ns["__check_version"];
    if (retfunc == null) {
        var func = gtkfunc("gtk_check_version");
        if (func == null)
            retfunc = function (int major, int minor, int micro)
            {
                return "Cannot check gtk version";
            };
        else retfunc = function (int major, int minor, int micro)
            {
                var p = func(major, minor, micro);
                string result;
                if (p != null)
                    result = string_from_nci(p);
                return result;
            };
         ns["__check_version"] = retfunc;
    }
    return retfunc;
}

function __widget_get_window()
{
    var ns = namespace internal;
    var retfunc = ns["__widget_get_window"];
    if (retfunc == null) {
        var func = gtkfunc("gtk_widget_get_window");
        if (func != null)
            retfunc = function (gtkw)
            {
                var gdkwindow = func(gtkw);
                return gdkwindow;
            };
        else
            retfunc = function (gtkw)
            {
                // The function gtk_widget_get_window is not available
                // until Gtk+ 2.14
                // This is a veeeery convoluted way to get
                // the window property from the widget.
                var interp = getinterp();
                var pointee = new['ManagedStruct']([DATATYPE_INT, 0, 0]);
                var pointer = new ['Pointer'];
                var get = get_parrot_func("Parrot_PMC_get_pointer", "ipP");
                var set = get_parrot_func("Parrot_PMC_set_pointer", "vpPi");
                if (get == null || set == null) throw "Vaya";
                int pval = get(interp, pointee);
                set(interp, pointer, pval);
                var func = gtkfunc("g_object_get");
                var p = str_to_cstring('window');
                func(gtkw, p, pointer, null);
                int n = pointee[0];
                var result = new ['UnManagedStruct'];
                set(interp, result, n);
                return result;
            };
        ns["__widget_get_window"] = retfunc;
    }
    return retfunc;
}

function __widget_get_style()
{
    var ns = namespace internal;
    var retfunc = ns["__widget_get_style"];
    if (retfunc == null) {
        var func = gtkfunc("gtk_widget_get_style");
        if (func != null)
            retfunc = function (gtkw)
            {
                var gdkstyke = func(gtkw);
                return gdkstyke;
            };
        else
            retfunc = function (gtkw)
            {
                throw "Can't draw with this gtk";
            };
        ns["__widget_get_style"] = retfunc;
    }
    return retfunc;
}

} // namespace __private

//**********************************************************************

using namespace __private;

function init(args)
{
    int argc = elements(args);
    var pargs = new 'ManagedStruct'([ DATATYPE_CSTR, argc, 0]);
    for (int i = 0; i < argc; ++i)
        pargs[0,i] = string(args[i]);
    var pargc = new 'ManagedStruct'([ DATATYPE_PTR, 0, 0]);
    gtkfunc("gtk_init")(pargc, pargs);
}

function gtk_main()
{
    var func = gtkfunc("gtk_main_iteration");
    int i;
    var quit = mainloop_quit();
    do {
        i = func();
        sleep(0.001);
    } while (i && ! quit);
}

function gtk_main_quit()
{
    int i = gtk_main_level();
    if (i == 0)
        mainloop_quit() =: true;
    else
        gtkfunc("gtk_main_quit")();
}

function gtk_check_version(int major, int minor, int micro)
{
    return __check_version()(major, minor, micro);
}

//**********************************************************************

class GObject
{
    var gtkw;
    function __gtkset(gtkw)
    {
        self.gtkw = gtkw;
    }
}

class Widget : GObject
{
    function destroy()
    {
        gtkfunc("gtk_widget_destroy")(self.gtkw);
    }
    function show()
    {
        gtkfunc("gtk_widget_show")(self.gtkw);
    }
    function set_size_request(int width, int height)
    {
        gtkfunc("gtk_widget_set_size_request")(self.gtkw, width, height);
    }
    function signal_connect(string signal_name, callback,
            data[optional], int has_data[opt_flag])
    {
        var func = gtkfunc("gtk_signal_connect_full");
        var callback_function = has_data ?
            function(widget, actualdata)
            {
                callback(actualdata);
            } :
            function(widget, actualdata)
            {
                callback();
            };
        var cb_data = has_data ? data : callback_function;
        var funback;
        ${ new_callback funback, callback_function, cb_data, 'iUp' };
        if (DEBUG) cry("connecting signal '", signal_name, "'");
        int r = func(self.gtkw, str_to_cstring(signal_name),
                funback, null, cb_data, null, 1, 1);
        return r;
    }
    function signal_disconnect(handler_id)
    {
        gtkfunc("g_signal_handler_disconnect")(self.gtkw, handler_id);
    }
}

class Misc : Widget
{
    function set_alignment(float xalign, float yalign)
    {
        var func = dlfunc(getlib(), "gtk_misc_set_alignment", "vpff");
        func(self.gtkw, xalign, yalign);
    }
    function set_padding(float xpad, float ypad)
    {
        var func = dlfunc(getlib(), "gtk_misc_set_padding", "vpff");
        func(self.gtkw, xpad, ypad);
    }
}

class Label : Misc
{
    function Label(string text)
    {
        var func = dlfunc(getlib(), "gtk_label_new", "pp");
        self.__gtkset(func(str_to_cstring(text)));
    }
}

class Editable : Widget {
    function get_chars(int start_pos, int end_pos)
    {
        var func = dlfunc(getlib(), "gtk_editable_get_chars", "ppii");
        var p = func(self.gtkw, start_pos, end_pos);
        string r;
        if (p != null) {
            r = string_from_nci(p);
            g_free(p);
        }
        return r;
    }
}

class Entry : Editable
{
    function Entry()
    {
        var func = dlfunc(getlib(), "gtk_entry_new", "p");
        self.__gtkset(func());
    }
    function get_text()
    {
        var func = dlfunc(getlib(), "gtk_entry_get_text", "pp");
        var t = func(self.gtkw);
        string result;
        if (t != null) {
            result = string_from_nci(t);
            if (DEBUG) cry("Entry.get_text - got '", result, "'");
        }
        return result;
    }
}

class Text : Editable
{
    function Text()
    {
        var func = dlfunc(getlib(), "gtk_text_new", "ppp");
        self.__gtkset(func(null, null));
    }
    function set_editable(int editable)
    {
        var func = dlfunc(getlib(), "gtk_text_set_editable", "vpi");
        func(self.gtkw, editable);
    }
    function insert(string text)
    {
        var func = dlfunc(getlib(), "gtk_text_insert", "vpppppi");
        func(self.gtkw, null, null, null, str_to_cstring(text), -1);
    }
}

class Container : Widget
{
    function set_border_width(int width)
    {
        gtkfunc("gtk_container_set_border_width")(self.gtkw, width);
    }
    function add(item)
    {
        gtkfunc("gtk_container_add")(self.gtkw, item.gtkw);
    }
}

class TextIter
{
    var gtkiter;
    function TextIter()
    {
        self.gtkiter = __text_iter_new();
    }
}

class TextBuffer : GObject
{
    function TextBuffer()
    {
        var func = dlfunc(getlib(), "gtk_text_buffer_new", "p");
        self.__gtkset(func());
    }
    function get_char_count()
    {
        var func = dlfunc(getlib(), "gtk_text_buffer_get_char_count", "ip");
        return func(self.gtkw);
    }
    function get_start_iter()
    {
        var func = dlfunc(getlib(), "gtk_text_buffer_get_start_iter", "vpp");
        var textiter = new TextIter();
        func(self.gtkw, textiter.gtkiter);
        return textiter;
    }
    function get_end_iter()
    {
        var func = dlfunc(getlib(), "gtk_text_buffer_get_end_iter", "vpp");
        var textiter = new TextIter();
        func(self.gtkw, textiter.gtkiter);
        return textiter;
    }
    function get_text(start, end, int include_hidden_chars)
    {
        var func = dlfunc(getlib(), "gtk_text_buffer_get_text", "ppppi");
        var p = func(self.gtkw, start.gtkiter, end.gtkiter, include_hidden_chars);
        string result;
        if (p != null) {
            result = string_from_nci(p);
            g_free(p);
        }
        return result;
    }
    function set_text(string text)
    {
        //TODO reencode text if not already utf8
        var func = dlfunc(getlib(), "gtk_text_buffer_set_text", "vppi");
        int len = bytelength(text);
        func(self.gtkw, str_to_cstring(text), len);
    }
}

class TextView : Container
{
    function TextView()
    {
        var func = dlfunc(getlib(), "gtk_text_view_new", "p");
        self.__gtkset(func());
    }
    function set_editable(int editable)
    {
        var func = dlfunc(getlib(), "gtk_text_view_set_editable", "vpi");
        func(self.gtkw, editable);
    }
    function __get_buffer()
    {
        var func = dlfunc(getlib(), "gtk_text_view_get_buffer", "pp");
        return func(self.gtkw);
    }
    function get_buffer()
    {
        var textbuffer = new TextBuffer; // Don't call the constructor
        textbuffer.__gtkset(self.__get_buffer());
        return textbuffer;
    }
    function get_char_count()
    {
        return self.get_buffer().get_char_count();
    }
    function get_text()
    {
       var buffer = self.get_buffer();
       return buffer.get_text(buffer.get_start_iter(), buffer.get_end_iter(), 0);
    }
}

class Bin : Container
{
}

class Box : Container
{
    function pack_start(widget, int expand, int fill, int padding)
    {
        gtkfunc("gtk_box_pack_start")
                (self.gtkw, widget.gtkw, expand, fill, padding);
    }
}

class VBox : Box
{
    function VBox(int homogeneous, int spacing)
    {
        var func = gtkfunc("gtk_vbox_new");
        self.__gtkset(func(homogeneous, spacing));
    }
}

class HBox : Box
{
    function HBox(int homogeneous, int spacing)
    {
        var func = gtkfunc("gtk_hbox_new");
        self.__gtkset(func(homogeneous, spacing));
    }
}

class ScrolledWindow : Bin
{
    function ScrolledWindow()
    {
        var func = dlfunc(getlib(), "gtk_scrolled_window_new", "ppp");
        self.__gtkset(func(null, null));
    }
    function add_with_viewport(child)
    {
        var func = dlfunc(getlib(), "gtk_scrolled_window_add_with_viewport", "vpp");
        func(self.gtkw, child.gtkw);
    }
    function set_policy(int hpolicy, int vpolicy)
    {
        var func = dlfunc(getlib(), "gtk_scrolled_window_set_policy", "vpii");
        func(self.gtkw, hpolicy, vpolicy);
    }
}

class Window : Bin
{
    function Window(int level)
    {
        var func = gtkfunc("gtk_window_new");
        self.__gtkset(func(0));
    }
    function set_title(string title)
    {
        gtkfunc("gtk_window_set_title")(self.gtkw, str_to_cstring(title));
    }
}

class Dialog : Window
{
    function run()
    {
        var func = dlfunc(getlib(), "gtk_dialog_run", "ip");
        int r = func(self.gtkw);
        return r;
    }
}

class MessageDialog : Dialog
{
    function MessageDialog(parent, int flags, int type, int buttons, string message)
    {
        var func = dlfunc(getlib(), "gtk_message_dialog_new", "ppiiipp");
        self.__gtkset(func(parent.gtkw, flags, type, buttons,
                str_to_cstring("%s"), str_to_cstring(message)));
    }
}

class Button : Bin
{
    function Button(string label)
    {
        var func = gtkfunc("gtk_button_new_with_label");
        self.__gtkset(func(str_to_cstring(label)));
    }
}

class TreeItem : Widget
{
    function TreeItem(string label)
    {
        var func = dlfunc(getlib(), "gtk_tree_item_new_with_label", "pp");
        self.__gtkset(func(str_to_cstring(label)));
    }
    function set_subtree(tree)
    {
        var func = dlfunc(getlib(), "gtk_tree_item_set_subtree", "vpp");
        func(self.gtkw, tree.gtkw);
    }
}

class Tree : Widget
{
    function Tree()
    {
        var func = dlfunc(getlib(), "gtk_tree_new", "p");
        self.__gtkset(func(0));
    }
    function append(item)
    {
        var func = dlfunc(getlib(), "gtk_tree_append", "vpp");
        func(self.gtkw, item.gtkw);
    }
}

class CList : Widget
{
    function CList(int ncolumns)
    {
        var func = dlfunc(getlib(), "gtk_clist_new", "pi");
        self.__gtkset(func(ncolumns));
    }
    function column_titles_show()
    {
        var func = dlfunc(getlib(), "gtk_clist_column_titles_show", "vp");
        func(self.gtkw);
    }
    function set_column_title(int column, string title)
    {
        var func = dlfunc(getlib(), "gtk_clist_set_column_title", "vpip");
        func(self.gtkw, column, str_to_cstring(title));
    }
    function set_text(int row, int column, string text)
    {
        var func = dlfunc(getlib(), "gtk_clist_set_text", "vpiip");
        func(self.gtkw, row, column, str_to_cstring(text));
    }
    function append(row)
    {
        int n = elements(row);
        var data = new 'ManagedStruct'([ DATATYPE_CSTR, n, 0]);
        for (int i = 0; i < n; ++i) {
            string r = row[i];
            data[0,i] = r;
        }
        var func = dlfunc(getlib(), "gtk_clist_append", "vpp");
        func(self.gtkw, data);
    }
}

class Image : Misc
{
    function Image(string filename)
    {
        var func = dlfunc(getlib(), "gtk_image_new_from_file", "pp");
        self.__gtkset(func(str_to_cstring(filename)));
    }
}

class DrawingArea : Widget
{
    function DrawingArea()
    {
        var func = dlfunc(getlib(), "gtk_drawing_area_new", "p");
        self.__gtkset(func());
    }
    function draw_rectangle(int x, int y, int width, int height)
    {
        var gdkwindow = __widget_get_window()(self.gtkw);
        var style = __widget_get_style()(self.gtkw);
        var func = dlfunc(getlib(), "gtk_draw_box", "vppiiiiii");
        func(style, gdkwindow, 0, 0, x, y, width, height);
    }
}

class MenuItem : Bin
{
    function MenuItem(string label)
    {
        var func = dlfunc(getlib(), "gtk_menu_item_new_with_label", "pp");
        self.__gtkset(func(str_to_cstring(label)));
    }
    function set_submenu(submenu)
    {
        var func = dlfunc(getlib(), "gtk_menu_item_set_submenu", "vpp");
        func(self.gtkw, submenu.gtkw);
    }
}

class MenuShell : Container
{
    function append(item)
    {
        var func = dlfunc(getlib(), "gtk_menu_shell_append", "vpp");
        func(self.gtkw, item.gtkw);
    }
}

class MenuBar : MenuShell
{
    function MenuBar()
    {
        var func = dlfunc(getlib(), "gtk_menu_bar_new", "p");
        self.__gtkset(func());
    }
}

class Menu : MenuShell
{
    function Menu()
    {
        var func = dlfunc(getlib(), "gtk_menu_new", "p");
        self.__gtkset(func());
    }
}

} // namespace WinxedGtk

//**********************************************************************

// End
